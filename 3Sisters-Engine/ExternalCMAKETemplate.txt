cmake_minimum_required(VERSION 3.28.0)
project(project-example VERSION 0.0.1 LANGUAGES C CXX)
cmake_policy(SET CMP0072 NEW)

#Include all files
#Add source files
file(GLOB_RECURSE SOURCE_FILES 
	${CMAKE_SOURCE_DIR}/src/*.c
	${CMAKE_SOURCE_DIR}/src/*.cpp)

# Add header files
file(GLOB_RECURSE HEADER_FILES 
	${CMAKE_SOURCE_DIR}/inc/*.h
	${CMAKE_SOURCE_DIR}/inc/*.hpp)
    
#include all files
add_executable(project-example
${HEADER_FILES} 
${SOURCE_FILES}
)

# Define resource folders
set(TEXTURES_DIR ${CMAKE_SOURCE_DIR}/textures)
set(SHADERS_DIR ${CMAKE_SOURCE_DIR}/shaders)
set(FONTS_DIR ${CMAKE_SOURCE_DIR}/fonts)
set(SOUNDS_DIR ${CMAKE_SOURCE_DIR}/sounds)

# Define the destination build folder
set(BUILD_DIR ${CMAKE_BINARY_DIR})

# Link libs if the detected OS is LINUX
if(UNIX)

#Create folders and their sub files for runtime loading
# Function to copy files if they are different
function(copy_if_different SRC_DIR DEST_DIR)
    file(GLOB_RECURSE FILES_LIST "${SRC_DIR}/*")
    foreach(FILE_PATH ${FILES_LIST})
        get_filename_component(FILE_NAME ${FILE_PATH} NAME)
        set(DEST_FILE_PATH "${DEST_DIR}/${FILE_NAME}")
        configure_file(${FILE_PATH} ${DEST_FILE_PATH} COPYONLY)
    endforeach()
endfunction()

# Call the function for each resource folder
copy_if_different(${TEXTURES_DIR} ${BUILD_DIR}/textures)
copy_if_different(${SHADERS_DIR} ${BUILD_DIR}/shaders)
copy_if_different(${SOUNDS_DIR} ${BUILD_DIR}/sounds)
copy_if_different(${FONTS_DIR} ${BUILD_DIR}/fonts)

# Add the path to your engine library's CMake configuration files
list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_SOURCE_DIR}3Sisters-Engine/build)

# Make reference to the 3Sisters-Engine's library and it's include folder
add_library(3Sisters-Engine SHARED IMPORTED)
set_target_properties(3Sisters-Engine PROPERTIES
    IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/3Sisters-Engine/build/lib3Sisters-Engine.so
    INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/3Sisters-Engine/build/include
)

#GLM
find_package(glm CONFIG REQUIRED)

#GLFW
find_package(glfw3 CONFIG REQUIRED)

#box2d
find_package(box2d CONFIG REQUIRED)

#Find SFML
find_package(SFML COMPONENTS audio REQUIRED)

#Find Freetype
find_package(Freetype REQUIRED)
# Link the extra packages their include directories to avoid linking errors
target_include_directories(project-example PRIVATE 3Sisters-Engine glm glfw box2d sfml-audio Freetype::Freetype)
# Link the 3Sisters-Engine to executable
target_link_libraries(project-example PRIVATE 3Sisters-Engine glm box2d glfw sfml-audio Freetype::Freetype)

endif (UNIX)

# Link libs if the detected OS is Windows
if(WIN32)

if(MSVC) #Using msys2's w64-x86_64 packages

#Create folders and their sub files for runtime loading
# Function to copy files if they are different
function(copy_if_different SRC_DIR DEST_DIR)
    file(GLOB_RECURSE FILES_LIST "${SRC_DIR}/*")
    foreach(FILE_PATH ${FILES_LIST})
        get_filename_component(FILE_NAME ${FILE_PATH} NAME)
        set(DEST_FILE_PATH "${DEST_DIR}/${FILE_NAME}")
        configure_file(${FILE_PATH} ${DEST_FILE_PATH} COPYONLY)
    endforeach()
endfunction()

# Call the function for each resource folder
copy_if_different(${TEXTURES_DIR} ${BUILD_DIR}/Release/textures)
copy_if_different(${SHADERS_DIR} ${BUILD_DIR}/Release/shaders)
copy_if_different(${SOUNDS_DIR} ${BUILD_DIR}/Release/sounds)
copy_if_different(${FONTS_DIR} ${BUILD_DIR}/Release/fonts)

#Get the engine library
# Add the path to your engine library's CMake configuration files
list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_SOURCE_DIR}\\3Sisters-Engine\\build)
# Make reference to the 3Sisters-Engine's library and it's include folder
add_library(3Sisters-Engine SHARED IMPORTED)
set_target_properties(3Sisters-Engine PROPERTIES
    IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}\\3Sisters-Engine\\build\\Release\\3Sisters-Engine.dll
    INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}\\3Sisters-Engine\\build\\include
    IMPORTED_IMPLIB ${CMAKE_CURRENT_SOURCE_DIR}\\3Sisters-Engine\\build/Release\\3Sisters-Engine-s.lib
)

#GLM
find_package(GLM CONFIG REQUIRED)

#GLFW
find_package(GLFW3 REQUIRED REQUIRED)

#box2d
find_package(BOX2D CONFIG REQUIRED)

#Find SFML
find_package(SFML COMPONENTS audio REQUIRED)

#Find Freetype
find_package(Freetype REQUIRED)

# Link the extra packages their include directories to avoid linking errors
target_include_directories(project-example PRIVATE 3Sisters-Engine glm::glm glfw box2d::box2d sfml-audio Freetype::Freetype)
# Link the 3Sisters-Engine to executable
target_link_libraries(project-example PRIVATE 3Sisters-Engine glm::glm glfw box2d::box2d sfml-audio Freetype::Freetype)

else(MSVC) #Using mingw

#Create folders and their sub files for runtime loading
# Function to copy files if they are different
function(copy_if_different SRC_DIR DEST_DIR)
    file(GLOB_RECURSE FILES_LIST "${SRC_DIR}/*")
    foreach(FILE_PATH ${FILES_LIST})
        get_filename_component(FILE_NAME ${FILE_PATH} NAME)
        set(DEST_FILE_PATH "${DEST_DIR}/${FILE_NAME}")
        configure_file(${FILE_PATH} ${DEST_FILE_PATH} COPYONLY)
    endforeach()
endfunction()

# Call the function for each resource folder
copy_if_different(${TEXTURES_DIR} ${BUILD_DIR}/textures)
copy_if_different(${SHADERS_DIR} ${BUILD_DIR}/shaders)
copy_if_different(${SOUNDS_DIR} ${BUILD_DIR}/sounds)
copy_if_different(${FONTS_DIR} ${BUILD_DIR}/fonts)

#Get the engine library
# Add the path to your engine library's CMake configuration files
list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_SOURCE_DIR}/3Sisters-Engine/build)
# Make reference to the 3Sisters-Engine's library and it's include folder
add_library(3Sisters-Engine SHARED IMPORTED)
set_target_properties(3Sisters-Engine PROPERTIES
    IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/3Sisters-Engine/build/lib3Sisters-Enginedll
    INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/3Sisters-Engine/build/include
    IMPORTED_IMPLIB ${CMAKE_CURRENT_SOURCE_DIR}/3Sisters-Engine/build/lib3Sisters-Engine-s.a
)

#GLM
find_package(GLM CONFIG REQUIRED)

#GLFW
find_package(GLFW3 REQUIRED REQUIRED)

#box2d
find_package(BOX2D CONFIG REQUIRED)

#Find SFML
find_package(SFML COMPONENTS audio REQUIRED)

#Find Freetype
find_package(Freetype REQUIRED)

# Link the extra packages their include directories to avoid linking errors
target_include_directories(project-example PRIVATE 3Sisters-Engine glm glfw box2d sfml-audio Freetype::Freetype)
# Link the 3Sisters-Engine to executable
target_link_libraries(project-example PRIVATE 3Sisters-Engine glm glfw box2d sfml-audio Freetype::Freetype)

endif(MSVC)

endif(WIN32)